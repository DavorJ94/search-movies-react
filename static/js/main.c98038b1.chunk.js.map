{"version":3,"sources":["movieCard.js","SearchMovies.js","App.js","reportWebVitals.js","index.js"],"names":["movieCard","movies","className","filter","movie","poster_path","map","src","alt","title","release_date","vote_average","overview","id","SearchMovies","useState","query","setQuery","setMovies","searchMovies","e","a","preventDefault","url","fetch","response","json","data","results","console","error","onSubmit","htmlFor","type","name","placeholder","value","onChange","target","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PACe,SAASA,EAAT,GAAgC,IAAXC,EAAU,EAAVA,OAClC,OACE,qBAAKC,UAAU,YAAf,SACGD,EACEE,QAAO,SAACC,GAAD,OAAWA,EAAMC,eACxBC,KAAI,SAACF,GAAD,OACH,sBAAKF,UAAU,OAAf,UACE,qBACEA,UAAU,YACVK,IAAG,0DAAqDH,EAAMC,aAC9DG,IAAG,UAAKJ,EAAMK,MAAX,aAEL,sBAAKP,UAAU,gBAAf,UACE,oBAAIA,UAAU,cAAd,SAA6BE,EAAMK,QACnC,mBAAGP,UAAU,gBAAb,SACE,mDAAsBE,EAAMM,kBAE9B,mBAAGR,UAAU,eAAb,SACE,qDAAwBE,EAAMO,kBAEhC,mBAAGT,UAAU,oBAAb,SAAkCE,EAAMQ,gBAdjBR,EAAMS,SCoC5BC,MAxCf,WAAyB,IAAD,EACIC,mBAAS,IADb,mBACfC,EADe,KACRC,EADQ,OAEMF,mBAAS,IAFf,mBAEfd,EAFe,KAEPiB,EAFO,KAIhBC,EAAY,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DACnBD,EAAEE,iBAEIC,EAHa,kHAGoGP,EAHpG,iDAKMQ,MAAMD,GALZ,cAKXE,EALW,gBAMEA,EAASC,OANX,OAMXC,EANW,OAOjBT,EAAUS,EAAKC,SAPE,kDASjBC,QAAQC,MAAR,MATiB,0DAAH,sDAalB,OACE,gCACE,uBAAM5B,UAAU,OAAO6B,SAAUZ,EAAjC,UACE,uBAAOa,QAAQ,QAAQ9B,UAAU,QAAjC,yBAGA,uBACEA,UAAU,QACV+B,KAAK,OACLC,KAAK,QACLC,YAAY,gBACZC,MAAOpB,EACPqB,SAAU,SAACjB,GAAD,OAAOH,EAASG,EAAEkB,OAAOF,UAErC,wBAAQlC,UAAU,SAAS+B,KAAK,SAAhC,uBAIF,cAAC,EAAD,CAAWhC,OAAQA,QC3BVsC,MATf,WACE,OACE,sBAAKrC,UAAU,YAAf,UACE,oBAAIA,UAAU,QAAd,gCACA,cAAC,EAAD,QCMSsC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c98038b1.chunk.js","sourcesContent":["import React from \"react\";\r\nexport default function movieCard({ movies }) {\r\n  return (\r\n    <div className=\"card-list\">\r\n      {movies\r\n        .filter((movie) => movie.poster_path)\r\n        .map((movie) => (\r\n          <div className=\"card\" key={movie.id}>\r\n            <img\r\n              className=\"card__img\"\r\n              src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2/${movie.poster_path}`}\r\n              alt={`${movie.title} poster`}\r\n            />\r\n            <div className=\"card__content\">\r\n              <h3 className=\"card__title\">{movie.title}</h3>\r\n              <p className=\"card__release\">\r\n                <small>Release date: {movie.release_date}</small>\r\n              </p>\r\n              <p className=\"card__rating\">\r\n                <small>Average rating: {movie.vote_average}</small>\r\n              </p>\r\n              <p className=\"card__description\">{movie.overview}</p>\r\n            </div>\r\n          </div>\r\n        ))}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport MovieCard from \"./movieCard\";\r\n\r\nfunction SearchMovies() {\r\n  const [query, setQuery] = useState(\"\");\r\n  const [movies, setMovies] = useState([]);\r\n\r\n  const searchMovies = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const url = `https://api.themoviedb.org/3/search/movie?api_key=e26fad2d1d175e7f72a19adabbb4e414&language=en-US&query=${query}&page=1&include_adult=false`;\r\n    try {\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n      setMovies(data.results);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form className=\"form\" onSubmit={searchMovies}>\r\n        <label htmlFor=\"query\" className=\"label\">\r\n          Movie name:\r\n        </label>\r\n        <input\r\n          className=\"input\"\r\n          type=\"text\"\r\n          name=\"query\"\r\n          placeholder=\"Search movies\"\r\n          value={query}\r\n          onChange={(e) => setQuery(e.target.value)}\r\n        />\r\n        <button className=\"button\" type=\"submit\">\r\n          Submit\r\n        </button>\r\n      </form>\r\n      <MovieCard movies={movies} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchMovies;\r\n","import \"./App.css\";\nimport SearchMovies from \"./SearchMovies\";\nfunction App() {\n  return (\n    <div className=\"container\">\n      <h1 className=\"title\">React Movie Search</h1>\n      <SearchMovies />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}